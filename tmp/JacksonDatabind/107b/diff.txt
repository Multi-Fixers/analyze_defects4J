@@ -1,52 +0,0 @@
-package com.fasterxml.jackson.databind.jsontype.impl;
-
-import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
-
-import com.fasterxml.jackson.databind.BeanProperty;
-import com.fasterxml.jackson.databind.JavaType;
-import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
-import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
-
-/**
- * Type deserializer used with {@link As#EXTERNAL_PROPERTY} inclusion mechanism.
- * Actual implementation may look bit strange since it depends on comprehensive
- * pre-processing done by {@link com.fasterxml.jackson.databind.deser.BeanDeserializer}
- * to basically transform external type id into structure that looks more like
- * "wrapper-array" style inclusion. This intermediate form is chosen to allow
- * supporting all possible JSON structures.
- */
-public class AsExternalTypeDeserializer extends AsArrayTypeDeserializer
-{
-    private static final long serialVersionUID = 1L;
-
-    /**
-     * @since 2.8
-     */
-    public AsExternalTypeDeserializer(JavaType bt, TypeIdResolver idRes,
-            String typePropertyName, boolean typeIdVisible, JavaType defaultImpl)
-    {
-        super(bt, idRes, typePropertyName, typeIdVisible, defaultImpl);
-    }
-
-    public AsExternalTypeDeserializer(AsExternalTypeDeserializer src,
-            BeanProperty property) {
-        super(src, property);
-    }
-    
-    @Override
-    public TypeDeserializer forProperty(BeanProperty prop) {
-        if (prop == _property) { // usually if it's null
-            return this;
-        }
-        return new AsExternalTypeDeserializer(this, prop);
-    }
-    
-    @Override
-    public As getTypeInclusion() { return As.EXTERNAL_PROPERTY; }
-
-    // yes, very important distinction...
-    @Override
-    protected boolean _usesExternalId() {
-        return true;
-    }
-}
Only in /home/kulindu.20/analyze_defects4J/tmp/JacksonDatabind/107b/buggy/src/main/java/com/fasterxml/jackson/databind/jsontype/impl: AsExternalTypeSerializer.java
diff -ur /home/kulindu.20/analyze_defects4J/tmp/JacksonDatabind/107b/buggy/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java /home/kulindu.20/analyze_defects4J/tmp/JacksonDatabind/107b/fixed/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
@@ -162,7 +162,7 @@
                     JavaType actual = _handleUnknownTypeId(ctxt, typeId);
                     if (actual == null) { // what should this be taken to mean?
                         // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...
-                        return null;
+                        return NullifyingDeserializer.instance;
                     }
                     // ... would this actually work?
                     deser = ctxt.findContextualValueDeserializer(actual, _property);
Only in /home/kulindu.20/analyze_defects4J/tmp/JacksonDatabind/107b/buggy/src/main/java/com/fasterxml/jackson/databind/jsontype/impl: TypeNameIdResolver.java
Only in /home/kulindu.20/analyze_defects4J/tmp/JacksonDatabind/107b/buggy/src/main/java/com/fasterxml/jackson/databind: module
