@@ -34,12 +34,20 @@
  * @version $Revision$ $Date$
  */
 public abstract class CoreOperationCompare extends CoreOperation {
+    private boolean invert;
 
     public CoreOperationCompare(Expression arg1, Expression arg2) {
+        this(arg1, arg2, false);
+    }
 
+    protected CoreOperationCompare(Expression arg1, Expression arg2, boolean invert) {
         super(new Expression[] { arg1, arg2 });
+        this.invert = invert;
     }
 
+    public Object computeValue(EvalContext context) {
+        return equal(context, args[0], args[1]) ? Boolean.TRUE : Boolean.FALSE;
+    }
 
     protected int getPrecedence() {
         return 2;
@@ -120,11 +128,6 @@
     }
 
     protected boolean equal(Object l, Object r) {
-        if (l instanceof Pointer && r instanceof Pointer) {
-            if (l.equals(r)) {
-                return true;
-            }
-        }
         if (l instanceof Pointer) {
             l = ((Pointer) l).getValue();
         }
@@ -133,21 +136,28 @@
             r = ((Pointer) r).getValue();
         }
 
-        if (l == r) {
-            return true;
-        }
+        boolean result;
         if (l instanceof Boolean || r instanceof Boolean) {
-            return (InfoSetUtil.booleanValue(l) == InfoSetUtil.booleanValue(r));
-            }
+            result = l == r || InfoSetUtil.booleanValue(l) == InfoSetUtil.booleanValue(r);
+        } else if (l instanceof Number || r instanceof Number) {
             //if either side is NaN, no comparison returns true:
-        if (l instanceof Number || r instanceof Number) {
-            return (InfoSetUtil.doubleValue(l) == InfoSetUtil.doubleValue(r));
+            double ld = InfoSetUtil.doubleValue(l);
+            if (Double.isNaN(ld)) {
+                return false;
             }
+            double rd = InfoSetUtil.doubleValue(r);
+            if (Double.isNaN(rd)) {
+                return false;
+            }
+            result = ld == rd;
+        } else {
             if (l instanceof String || r instanceof String) {
-            return (
-                InfoSetUtil.stringValue(l).equals(InfoSetUtil.stringValue(r)));
+                l = InfoSetUtil.stringValue(l);
+                r = InfoSetUtil.stringValue(r);
+            }
+            result = l == r || l != null && l.equals(r);
         }
-        return l != null && l.equals(r);
+        return result ^ invert;
     }
 
 }
diff -ur /home/kulindu.20/analyze_defects4J/tmp/JxPath/9b/buggy/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationEqual.java /home/kulindu.20/analyze_defects4J/tmp/JxPath/9b/fixed/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationEqual.java
@@ -28,9 +28,6 @@
         super(arg1, arg2);
     }
 
-    public Object computeValue(org.apache.commons.jxpath.ri.EvalContext context) {
-        return equal(context, args[0], args[1]) ? Boolean.TRUE : Boolean.FALSE;
-    }
     public String getSymbol() {
         return "=";
     }
diff -ur /home/kulindu.20/analyze_defects4J/tmp/JxPath/9b/buggy/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNotEqual.java /home/kulindu.20/analyze_defects4J/tmp/JxPath/9b/fixed/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNotEqual.java
@@ -25,12 +25,9 @@
 public class CoreOperationNotEqual extends CoreOperationCompare {
 
     public CoreOperationNotEqual(Expression arg1, Expression arg2) {
-        super(arg1, arg2);
+        super(arg1, arg2, true);
     }
 
-    public Object computeValue(org.apache.commons.jxpath.ri.EvalContext context) {
-        return equal(context, args[0], args[1]) ? Boolean.FALSE : Boolean.TRUE;
-    }
     public String getSymbol() {
         return "!=";
     }
